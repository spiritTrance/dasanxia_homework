CONSTTK	const
FLOATTK	float
IDENFR	RADIUS
ASSIGN	=
FLOATLTR	5.5
COMMA	,
IDENFR	PI
ASSIGN	=
FLOATLTR	03.141592653589793
COMMA	,
IDENFR	EPS
ASSIGN	=
FLOATLTR	0.000001
SEMICN	;
CONSTTK	const
FLOATTK	float
IDENFR	PI_HEX
ASSIGN	=
FLOATLTR	3.141592741012573242
COMMA	,
IDENFR	HEX2
ASSIGN	=
FLOATLTR	0.078125
SEMICN	;
CONSTTK	const
FLOATTK	float
IDENFR	FACT
ASSIGN	=
MINU	-
FLOATLTR	33000.0
COMMA	,
IDENFR	EVAL1
ASSIGN	=
IDENFR	PI
MULT	*
IDENFR	RADIUS
MULT	*
IDENFR	RADIUS
COMMA	,
IDENFR	EVAL2
ASSIGN	=
INTLTR	2
MULT	*
IDENFR	PI_HEX
MULT	*
IDENFR	RADIUS
COMMA	,
IDENFR	EVAL3
ASSIGN	=
IDENFR	PI
MULT	*
INTLTR	2
MULT	*
IDENFR	RADIUS
SEMICN	;
CONSTTK	const
FLOATTK	float
IDENFR	CONV1
ASSIGN	=
INTLTR	233
COMMA	,
IDENFR	CONV2
ASSIGN	=
INTLTR	0xfff
SEMICN	;
CONSTTK	const
INTTK	int
IDENFR	MAX
ASSIGN	=
INTLTR	1000000000
COMMA	,
IDENFR	TWO
ASSIGN	=
FLOATLTR	2.9
COMMA	,
IDENFR	THREE
ASSIGN	=
FLOATLTR	3.2
COMMA	,
IDENFR	FIVE
ASSIGN	=
IDENFR	TWO
PLUS	+
IDENFR	THREE
SEMICN	;
FLOATTK	float
IDENFR	float_abs
LPARENT	(
FLOATTK	float
IDENFR	x
RPARENT	)
LBRACE	{
IFTK	if
LPARENT	(
IDENFR	x
LSS	<
INTLTR	0
RPARENT	)
RETURNTK	return
MINU	-
IDENFR	x
SEMICN	;
RETURNTK	return
IDENFR	x
SEMICN	;
RBRACE	}
FLOATTK	float
IDENFR	circle_area
LPARENT	(
INTTK	int
IDENFR	radius
RPARENT	)
LBRACE	{
RETURNTK	return
LPARENT	(
IDENFR	PI
MULT	*
IDENFR	radius
MULT	*
IDENFR	radius
PLUS	+
LPARENT	(
IDENFR	radius
MULT	*
IDENFR	radius
RPARENT	)
MULT	*
IDENFR	PI
RPARENT	)
DIV	/
INTLTR	2
SEMICN	;
RBRACE	}
INTTK	int
IDENFR	float_eq
LPARENT	(
FLOATTK	float
IDENFR	a
COMMA	,
FLOATTK	float
IDENFR	b
RPARENT	)
LBRACE	{
IFTK	if
LPARENT	(
IDENFR	float_abs
LPARENT	(
IDENFR	a
MINU	-
IDENFR	b
RPARENT	)
LSS	<
IDENFR	EPS
RPARENT	)
LBRACE	{
RETURNTK	return
INTLTR	1
MULT	*
FLOATLTR	2.
DIV	/
INTLTR	2
SEMICN	;
RBRACE	}
ELSETK	else
LBRACE	{
RETURNTK	return
INTLTR	0
SEMICN	;
RBRACE	}
RBRACE	}
VOIDTK	void
IDENFR	error
LPARENT	(
RPARENT	)
LBRACE	{
IDENFR	putch
LPARENT	(
INTLTR	101
RPARENT	)
SEMICN	;
IDENFR	putch
LPARENT	(
INTLTR	114
RPARENT	)
SEMICN	;
IDENFR	putch
LPARENT	(
INTLTR	114
RPARENT	)
SEMICN	;
IDENFR	putch
LPARENT	(
INTLTR	111
RPARENT	)
SEMICN	;
IDENFR	putch
LPARENT	(
INTLTR	114
RPARENT	)
SEMICN	;
IDENFR	putch
LPARENT	(
INTLTR	10
RPARENT	)
SEMICN	;
RBRACE	}
VOIDTK	void
IDENFR	ok
LPARENT	(
RPARENT	)
LBRACE	{
IDENFR	putch
LPARENT	(
INTLTR	111
RPARENT	)
SEMICN	;
IDENFR	putch
LPARENT	(
INTLTR	107
RPARENT	)
SEMICN	;
IDENFR	putch
LPARENT	(
INTLTR	10
RPARENT	)
SEMICN	;
RBRACE	}
VOIDTK	void
IDENFR	assert
LPARENT	(
INTTK	int
IDENFR	cond
RPARENT	)
LBRACE	{
IFTK	if
LPARENT	(
NOT	!
IDENFR	cond
RPARENT	)
LBRACE	{
IDENFR	error
LPARENT	(
RPARENT	)
SEMICN	;
RBRACE	}
ELSETK	else
LBRACE	{
IDENFR	ok
LPARENT	(
RPARENT	)
SEMICN	;
RBRACE	}
RBRACE	}
VOIDTK	void
IDENFR	assert_not
LPARENT	(
INTTK	int
IDENFR	cond
RPARENT	)
LBRACE	{
IFTK	if
LPARENT	(
IDENFR	cond
RPARENT	)
LBRACE	{
IDENFR	error
LPARENT	(
RPARENT	)
SEMICN	;
RBRACE	}
ELSETK	else
LBRACE	{
IDENFR	ok
LPARENT	(
RPARENT	)
SEMICN	;
RBRACE	}
RBRACE	}
INTTK	int
IDENFR	main
LPARENT	(
RPARENT	)
LBRACE	{
FLOATTK	float
IDENFR	f
ASSIGN	=
INTLTR	2
MULT	*
INTLTR	16
PLUS	+
INTLTR	32
MINU	-
INTLTR	0x40
MINU	-
FLOATLTR	0.1
SEMICN	;
IDENFR	assert_not
LPARENT	(
IDENFR	float_eq
LPARENT	(
IDENFR	HEX2
COMMA	,
IDENFR	FACT
RPARENT	)
RPARENT	)
SEMICN	;
IDENFR	assert_not
LPARENT	(
IDENFR	float_eq
LPARENT	(
IDENFR	EVAL1
COMMA	,
IDENFR	EVAL2
RPARENT	)
RPARENT	)
SEMICN	;
IDENFR	assert
LPARENT	(
IDENFR	float_eq
LPARENT	(
IDENFR	EVAL2
COMMA	,
IDENFR	EVAL3
RPARENT	)
RPARENT	)
SEMICN	;
IDENFR	assert
LPARENT	(
IDENFR	float_eq
LPARENT	(
IDENFR	circle_area
LPARENT	(
IDENFR	RADIUS
RPARENT	)
COMMA	,
IDENFR	circle_area
LPARENT	(
IDENFR	FIVE
RPARENT	)
RPARENT	)
RPARENT	)
SEMICN	;
IDENFR	assert_not
LPARENT	(
IDENFR	float_eq
LPARENT	(
IDENFR	CONV1
COMMA	,
IDENFR	CONV2
RPARENT	)
RPARENT	)
SEMICN	;
IFTK	if
LPARENT	(
FLOATLTR	1.5
RPARENT	)
IDENFR	ok
LPARENT	(
RPARENT	)
SEMICN	;
IFTK	if
LPARENT	(
NOT	!
NOT	!
FLOATLTR	3.3
RPARENT	)
IDENFR	ok
LPARENT	(
RPARENT	)
SEMICN	;
IFTK	if
LPARENT	(
FLOATLTR	.0
AND	&&
INTLTR	3
EQL	==
FLOATLTR	0.4
RPARENT	)
IDENFR	error
LPARENT	(
RPARENT	)
SEMICN	;
IFTK	if
LPARENT	(
INTLTR	0
OR	||
FLOATLTR	0.3
RPARENT	)
IDENFR	ok
LPARENT	(
RPARENT	)
SEMICN	;
INTTK	int
IDENFR	i
ASSIGN	=
INTLTR	1
COMMA	,
IDENFR	p
ASSIGN	=
INTLTR	0
SEMICN	;
FLOATTK	float
IDENFR	arr
LBRACK	[
INTLTR	10
RBRACK	]
ASSIGN	=
LBRACE	{
FLOATLTR	1.
COMMA	,
INTLTR	2
RBRACE	}
SEMICN	;
INTTK	int
IDENFR	len
ASSIGN	=
IDENFR	getfarray
LPARENT	(
IDENFR	arr
RPARENT	)
SEMICN	;
WHILETK	while
LPARENT	(
IDENFR	i
LSS	<
IDENFR	MAX
RPARENT	)
LBRACE	{
FLOATTK	float
IDENFR	input
ASSIGN	=
IDENFR	getfloat
LPARENT	(
RPARENT	)
SEMICN	;
FLOATTK	float
IDENFR	area
ASSIGN	=
IDENFR	PI
MULT	*
IDENFR	input
MULT	*
IDENFR	input
COMMA	,
IDENFR	area_trunc
ASSIGN	=
IDENFR	circle_area
LPARENT	(
IDENFR	input
RPARENT	)
SEMICN	;
IDENFR	arr
LBRACK	[
IDENFR	p
RBRACK	]
ASSIGN	=
IDENFR	arr
LBRACK	[
IDENFR	p
RBRACK	]
PLUS	+
IDENFR	input
SEMICN	;
IDENFR	putfloat
LPARENT	(
IDENFR	area
RPARENT	)
SEMICN	;
IDENFR	putch
LPARENT	(
INTLTR	32
RPARENT	)
SEMICN	;
IDENFR	putint
LPARENT	(
IDENFR	area_trunc
RPARENT	)
SEMICN	;
IDENFR	putch
LPARENT	(
INTLTR	10
RPARENT	)
SEMICN	;
IDENFR	i
ASSIGN	=
IDENFR	i
MULT	*
MINU	-
MINU	-
INTLTR	10
SEMICN	;
IDENFR	p
ASSIGN	=
IDENFR	p
PLUS	+
INTLTR	1
SEMICN	;
RBRACE	}
IDENFR	putfarray
LPARENT	(
IDENFR	len
COMMA	,
IDENFR	arr
RPARENT	)
SEMICN	;
RETURNTK	return
INTLTR	0
SEMICN	;
RBRACE	}
