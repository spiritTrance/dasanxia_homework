INTTK	int
IDENFR	exgcd
LPARENT	(
INTTK	int
IDENFR	a
COMMA	,
INTTK	int
IDENFR	b
COMMA	,
INTTK	int
IDENFR	x
LBRACK	[
RBRACK	]
COMMA	,
INTTK	int
IDENFR	y
LBRACK	[
RBRACK	]
RPARENT	)
LBRACE	{
IFTK	if
LPARENT	(
IDENFR	b
EQL	==
INTLTR	0
RPARENT	)
LBRACE	{
IDENFR	x
LBRACK	[
INTLTR	0
RBRACK	]
ASSIGN	=
INTLTR	1
SEMICN	;
IDENFR	y
LBRACK	[
INTLTR	0
RBRACK	]
ASSIGN	=
INTLTR	0
SEMICN	;
RETURNTK	return
IDENFR	a
SEMICN	;
RBRACE	}
ELSETK	else
LBRACE	{
INTTK	int
IDENFR	r
ASSIGN	=
IDENFR	exgcd
LPARENT	(
IDENFR	b
COMMA	,
IDENFR	a
MOD	%
IDENFR	b
COMMA	,
IDENFR	x
COMMA	,
IDENFR	y
RPARENT	)
SEMICN	;
INTTK	int
IDENFR	t
ASSIGN	=
IDENFR	x
LBRACK	[
INTLTR	0
RBRACK	]
SEMICN	;
IDENFR	x
LBRACK	[
INTLTR	0
RBRACK	]
ASSIGN	=
IDENFR	y
LBRACK	[
INTLTR	0
RBRACK	]
SEMICN	;
IDENFR	y
LBRACK	[
INTLTR	0
RBRACK	]
ASSIGN	=
LPARENT	(
IDENFR	t
MINU	-
IDENFR	a
DIV	/
IDENFR	b
MULT	*
IDENFR	y
LBRACK	[
INTLTR	0
RBRACK	]
RPARENT	)
SEMICN	;
RETURNTK	return
IDENFR	r
SEMICN	;
RBRACE	}
RBRACE	}
INTTK	int
IDENFR	main
LPARENT	(
RPARENT	)
LBRACE	{
INTTK	int
IDENFR	a
ASSIGN	=
INTLTR	7
COMMA	,
IDENFR	b
ASSIGN	=
INTLTR	15
COMMA	,
IDENFR	x
LBRACK	[
INTLTR	1
RBRACK	]
ASSIGN	=
LBRACE	{
INTLTR	1
RBRACE	}
COMMA	,
IDENFR	y
LBRACK	[
INTLTR	1
RBRACK	]
ASSIGN	=
LBRACE	{
INTLTR	1
RBRACE	}
SEMICN	;
IDENFR	exgcd
LPARENT	(
IDENFR	a
COMMA	,
IDENFR	b
COMMA	,
IDENFR	x
COMMA	,
IDENFR	y
RPARENT	)
SEMICN	;
IDENFR	x
LBRACK	[
INTLTR	0
RBRACK	]
ASSIGN	=
LPARENT	(
IDENFR	x
LBRACK	[
INTLTR	0
RBRACK	]
MOD	%
IDENFR	b
PLUS	+
IDENFR	b
RPARENT	)
MOD	%
IDENFR	b
SEMICN	;
IDENFR	putint
LPARENT	(
IDENFR	x
LBRACK	[
INTLTR	0
RBRACK	]
RPARENT	)
SEMICN	;
RETURNTK	return
INTLTR	0
SEMICN	;
RBRACE	}
