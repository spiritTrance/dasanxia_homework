INTTK	int
IDENFR	ints
LBRACK	[
INTLTR	10000
RBRACK	]
SEMICN	;
INTTK	int
IDENFR	intt
SEMICN	;
INTTK	int
IDENFR	chas
LBRACK	[
INTLTR	10000
RBRACK	]
SEMICN	;
INTTK	int
IDENFR	chat
SEMICN	;
INTTK	int
IDENFR	i
ASSIGN	=
INTLTR	0
COMMA	,
IDENFR	ii
ASSIGN	=
INTLTR	1
SEMICN	;
INTTK	int
IDENFR	c
SEMICN	;
INTTK	int
IDENFR	get
LBRACK	[
INTLTR	10000
RBRACK	]
SEMICN	;
INTTK	int
IDENFR	get2
LBRACK	[
INTLTR	10000
RBRACK	]
SEMICN	;
INTTK	int
IDENFR	isdigit
LPARENT	(
INTTK	int
IDENFR	x
RPARENT	)
LBRACE	{
IFTK	if
LPARENT	(
IDENFR	x
GEQ	>=
INTLTR	48
AND	&&
IDENFR	x
LEQ	<=
INTLTR	57
RPARENT	)
RETURNTK	return
INTLTR	1
SEMICN	;
RETURNTK	return
INTLTR	0
SEMICN	;
RBRACE	}
INTTK	int
IDENFR	power
LPARENT	(
INTTK	int
IDENFR	b
COMMA	,
INTTK	int
IDENFR	a
RPARENT	)
LBRACE	{
INTTK	int
IDENFR	result
ASSIGN	=
INTLTR	1
SEMICN	;
WHILETK	while
LPARENT	(
IDENFR	a
NEQ	!=
INTLTR	0
RPARENT	)
LBRACE	{
IDENFR	result
ASSIGN	=
IDENFR	result
MULT	*
IDENFR	b
SEMICN	;
IDENFR	a
ASSIGN	=
IDENFR	a
MINU	-
INTLTR	1
SEMICN	;
RBRACE	}
RETURNTK	return
IDENFR	result
SEMICN	;
RBRACE	}
INTTK	int
IDENFR	getstr
LPARENT	(
INTTK	int
IDENFR	get
LBRACK	[
RBRACK	]
RPARENT	)
LBRACE	{
INTTK	int
IDENFR	x
ASSIGN	=
IDENFR	getch
LPARENT	(
RPARENT	)
SEMICN	;
INTTK	int
IDENFR	length
ASSIGN	=
INTLTR	0
SEMICN	;
WHILETK	while
LPARENT	(
IDENFR	x
NEQ	!=
INTLTR	13
AND	&&
IDENFR	x
NEQ	!=
INTLTR	10
RPARENT	)
LBRACE	{
IDENFR	get
LBRACK	[
IDENFR	length
RBRACK	]
ASSIGN	=
IDENFR	x
SEMICN	;
IDENFR	length
ASSIGN	=
IDENFR	length
PLUS	+
INTLTR	1
SEMICN	;
IDENFR	x
ASSIGN	=
IDENFR	getch
LPARENT	(
RPARENT	)
SEMICN	;
RBRACE	}
RETURNTK	return
IDENFR	length
SEMICN	;
RBRACE	}
VOIDTK	void
IDENFR	intpush
LPARENT	(
INTTK	int
IDENFR	x
RPARENT	)
LBRACE	{
IDENFR	intt
ASSIGN	=
IDENFR	intt
PLUS	+
INTLTR	1
SEMICN	;
IDENFR	ints
LBRACK	[
IDENFR	intt
RBRACK	]
ASSIGN	=
IDENFR	x
SEMICN	;
RBRACE	}
VOIDTK	void
IDENFR	chapush
LPARENT	(
INTTK	int
IDENFR	x
RPARENT	)
LBRACE	{
IDENFR	chat
ASSIGN	=
IDENFR	chat
PLUS	+
INTLTR	1
SEMICN	;
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
ASSIGN	=
IDENFR	x
SEMICN	;
RBRACE	}
INTTK	int
IDENFR	intpop
LPARENT	(
RPARENT	)
LBRACE	{
IDENFR	intt
ASSIGN	=
IDENFR	intt
MINU	-
INTLTR	1
SEMICN	;
RETURNTK	return
IDENFR	ints
LBRACK	[
IDENFR	intt
PLUS	+
INTLTR	1
RBRACK	]
SEMICN	;
RBRACE	}
INTTK	int
IDENFR	chapop
LPARENT	(
RPARENT	)
LBRACE	{
IDENFR	chat
ASSIGN	=
IDENFR	chat
MINU	-
INTLTR	1
SEMICN	;
RETURNTK	return
IDENFR	chas
LBRACK	[
IDENFR	chat
PLUS	+
INTLTR	1
RBRACK	]
SEMICN	;
RBRACE	}
VOIDTK	void
IDENFR	intadd
LPARENT	(
INTTK	int
IDENFR	x
RPARENT	)
LBRACE	{
IDENFR	ints
LBRACK	[
IDENFR	intt
RBRACK	]
ASSIGN	=
IDENFR	ints
LBRACK	[
IDENFR	intt
RBRACK	]
MULT	*
INTLTR	10
SEMICN	;
IDENFR	ints
LBRACK	[
IDENFR	intt
RBRACK	]
ASSIGN	=
IDENFR	ints
LBRACK	[
IDENFR	intt
RBRACK	]
PLUS	+
IDENFR	x
SEMICN	;
RBRACE	}
INTTK	int
IDENFR	find
LPARENT	(
RPARENT	)
LBRACE	{
IDENFR	c
ASSIGN	=
IDENFR	chapop
LPARENT	(
RPARENT	)
SEMICN	;
IDENFR	get2
LBRACK	[
IDENFR	ii
RBRACK	]
ASSIGN	=
INTLTR	32
SEMICN	;
IDENFR	get2
LBRACK	[
IDENFR	ii
PLUS	+
INTLTR	1
RBRACK	]
ASSIGN	=
IDENFR	c
SEMICN	;
IDENFR	ii
ASSIGN	=
IDENFR	ii
PLUS	+
INTLTR	2
SEMICN	;
IFTK	if
LPARENT	(
IDENFR	chat
EQL	==
INTLTR	0
RPARENT	)
RETURNTK	return
INTLTR	0
SEMICN	;
RETURNTK	return
INTLTR	1
SEMICN	;
RBRACE	}
INTTK	int
IDENFR	main
LPARENT	(
RPARENT	)
LBRACE	{
IDENFR	intt
ASSIGN	=
INTLTR	0
SEMICN	;
IDENFR	chat
ASSIGN	=
INTLTR	0
SEMICN	;
INTTK	int
IDENFR	lengets
ASSIGN	=
IDENFR	getstr
LPARENT	(
IDENFR	get
RPARENT	)
SEMICN	;
WHILETK	while
LPARENT	(
IDENFR	i
LSS	<
IDENFR	lengets
RPARENT	)
LBRACE	{
IFTK	if
LPARENT	(
IDENFR	isdigit
LPARENT	(
IDENFR	get
LBRACK	[
IDENFR	i
RBRACK	]
RPARENT	)
EQL	==
INTLTR	1
RPARENT	)
LBRACE	{
IDENFR	get2
LBRACK	[
IDENFR	ii
RBRACK	]
ASSIGN	=
IDENFR	get
LBRACK	[
IDENFR	i
RBRACK	]
SEMICN	;
IDENFR	ii
ASSIGN	=
IDENFR	ii
PLUS	+
INTLTR	1
SEMICN	;
RBRACE	}
ELSETK	else
LBRACE	{
IFTK	if
LPARENT	(
IDENFR	get
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	40
RPARENT	)
IDENFR	chapush
LPARENT	(
INTLTR	40
RPARENT	)
SEMICN	;
IFTK	if
LPARENT	(
IDENFR	get
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	94
RPARENT	)
IDENFR	chapush
LPARENT	(
INTLTR	94
RPARENT	)
SEMICN	;
IFTK	if
LPARENT	(
IDENFR	get
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	41
RPARENT	)
LBRACE	{
IDENFR	c
ASSIGN	=
IDENFR	chapop
LPARENT	(
RPARENT	)
SEMICN	;
WHILETK	while
LPARENT	(
IDENFR	c
NEQ	!=
INTLTR	40
RPARENT	)
LBRACE	{
IDENFR	get2
LBRACK	[
IDENFR	ii
RBRACK	]
ASSIGN	=
INTLTR	32
SEMICN	;
IDENFR	get2
LBRACK	[
IDENFR	ii
PLUS	+
INTLTR	1
RBRACK	]
ASSIGN	=
IDENFR	c
SEMICN	;
IDENFR	ii
ASSIGN	=
IDENFR	ii
PLUS	+
INTLTR	2
SEMICN	;
IDENFR	c
ASSIGN	=
IDENFR	chapop
LPARENT	(
RPARENT	)
SEMICN	;
RBRACE	}
RBRACE	}
IFTK	if
LPARENT	(
IDENFR	get
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	43
RPARENT	)
LBRACE	{
WHILETK	while
LPARENT	(
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	43
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	45
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	42
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	47
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	37
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	94
RPARENT	)
LBRACE	{
IFTK	if
LPARENT	(
IDENFR	find
LPARENT	(
RPARENT	)
EQL	==
INTLTR	0
RPARENT	)
BREAKTK	break
SEMICN	;
RBRACE	}
IDENFR	chapush
LPARENT	(
INTLTR	43
RPARENT	)
SEMICN	;
RBRACE	}
IFTK	if
LPARENT	(
IDENFR	get
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	45
RPARENT	)
LBRACE	{
WHILETK	while
LPARENT	(
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	43
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	45
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	42
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	47
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	37
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	94
RPARENT	)
LBRACE	{
IFTK	if
LPARENT	(
IDENFR	find
LPARENT	(
RPARENT	)
EQL	==
INTLTR	0
RPARENT	)
BREAKTK	break
SEMICN	;
RBRACE	}
IDENFR	chapush
LPARENT	(
INTLTR	45
RPARENT	)
SEMICN	;
RBRACE	}
IFTK	if
LPARENT	(
IDENFR	get
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	42
RPARENT	)
LBRACE	{
WHILETK	while
LPARENT	(
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	42
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	47
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	37
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	94
RPARENT	)
LBRACE	{
IFTK	if
LPARENT	(
IDENFR	find
LPARENT	(
RPARENT	)
EQL	==
INTLTR	0
RPARENT	)
BREAKTK	break
SEMICN	;
RBRACE	}
IDENFR	chapush
LPARENT	(
INTLTR	42
RPARENT	)
SEMICN	;
RBRACE	}
IFTK	if
LPARENT	(
IDENFR	get
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	47
RPARENT	)
LBRACE	{
WHILETK	while
LPARENT	(
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	42
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	47
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	37
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	94
RPARENT	)
LBRACE	{
IFTK	if
LPARENT	(
IDENFR	find
LPARENT	(
RPARENT	)
EQL	==
INTLTR	0
RPARENT	)
BREAKTK	break
SEMICN	;
RBRACE	}
IDENFR	chapush
LPARENT	(
INTLTR	47
RPARENT	)
SEMICN	;
RBRACE	}
IFTK	if
LPARENT	(
IDENFR	get
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	37
RPARENT	)
LBRACE	{
WHILETK	while
LPARENT	(
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	42
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	47
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	37
OR	||
IDENFR	chas
LBRACK	[
IDENFR	chat
RBRACK	]
EQL	==
INTLTR	94
RPARENT	)
LBRACE	{
IFTK	if
LPARENT	(
IDENFR	find
LPARENT	(
RPARENT	)
EQL	==
INTLTR	0
RPARENT	)
BREAKTK	break
SEMICN	;
RBRACE	}
IDENFR	chapush
LPARENT	(
INTLTR	37
RPARENT	)
SEMICN	;
RBRACE	}
IDENFR	get2
LBRACK	[
IDENFR	ii
RBRACK	]
ASSIGN	=
INTLTR	32
SEMICN	;
IDENFR	ii
ASSIGN	=
IDENFR	ii
PLUS	+
INTLTR	1
SEMICN	;
RBRACE	}
IDENFR	i
ASSIGN	=
IDENFR	i
PLUS	+
INTLTR	1
SEMICN	;
RBRACE	}
WHILETK	while
LPARENT	(
IDENFR	chat
GTR	>
INTLTR	0
RPARENT	)
LBRACE	{
INTTK	int
IDENFR	c
ASSIGN	=
IDENFR	chapop
LPARENT	(
RPARENT	)
SEMICN	;
IDENFR	get2
LBRACK	[
IDENFR	ii
RBRACK	]
ASSIGN	=
INTLTR	32
SEMICN	;
IDENFR	get2
LBRACK	[
IDENFR	ii
PLUS	+
INTLTR	1
RBRACK	]
ASSIGN	=
IDENFR	c
SEMICN	;
IDENFR	ii
ASSIGN	=
IDENFR	ii
PLUS	+
INTLTR	2
SEMICN	;
RBRACE	}
IDENFR	get2
LBRACK	[
IDENFR	ii
RBRACK	]
ASSIGN	=
INTLTR	64
SEMICN	;
IDENFR	i
ASSIGN	=
INTLTR	1
SEMICN	;
WHILETK	while
LPARENT	(
IDENFR	get2
LBRACK	[
IDENFR	i
RBRACK	]
NEQ	!=
INTLTR	64
RPARENT	)
LBRACE	{
IFTK	if
LPARENT	(
IDENFR	get2
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	43
OR	||
IDENFR	get2
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	45
OR	||
IDENFR	get2
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	42
OR	||
IDENFR	get2
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	47
OR	||
IDENFR	get2
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	37
OR	||
IDENFR	get2
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	94
RPARENT	)
LBRACE	{
INTTK	int
IDENFR	a
ASSIGN	=
IDENFR	intpop
LPARENT	(
RPARENT	)
SEMICN	;
INTTK	int
IDENFR	b
ASSIGN	=
IDENFR	intpop
LPARENT	(
RPARENT	)
SEMICN	;
INTTK	int
IDENFR	c
SEMICN	;
IFTK	if
LPARENT	(
IDENFR	get2
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	43
RPARENT	)
IDENFR	c
ASSIGN	=
IDENFR	a
PLUS	+
IDENFR	b
SEMICN	;
IFTK	if
LPARENT	(
IDENFR	get2
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	45
RPARENT	)
IDENFR	c
ASSIGN	=
IDENFR	b
MINU	-
IDENFR	a
SEMICN	;
IFTK	if
LPARENT	(
IDENFR	get2
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	42
RPARENT	)
IDENFR	c
ASSIGN	=
IDENFR	a
MULT	*
IDENFR	b
SEMICN	;
IFTK	if
LPARENT	(
IDENFR	get2
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	47
RPARENT	)
IDENFR	c
ASSIGN	=
IDENFR	b
DIV	/
IDENFR	a
SEMICN	;
IFTK	if
LPARENT	(
IDENFR	get2
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	37
RPARENT	)
IDENFR	c
ASSIGN	=
IDENFR	b
MOD	%
IDENFR	a
SEMICN	;
IFTK	if
LPARENT	(
IDENFR	get2
LBRACK	[
IDENFR	i
RBRACK	]
EQL	==
INTLTR	94
RPARENT	)
IDENFR	c
ASSIGN	=
IDENFR	power
LPARENT	(
IDENFR	b
COMMA	,
IDENFR	a
RPARENT	)
SEMICN	;
IDENFR	intpush
LPARENT	(
IDENFR	c
RPARENT	)
SEMICN	;
RBRACE	}
ELSETK	else
LBRACE	{
IFTK	if
LPARENT	(
IDENFR	get2
LBRACK	[
IDENFR	i
RBRACK	]
NEQ	!=
INTLTR	32
RPARENT	)
LBRACE	{
IDENFR	intpush
LPARENT	(
IDENFR	get2
LBRACK	[
IDENFR	i
RBRACK	]
MINU	-
INTLTR	48
RPARENT	)
SEMICN	;
IDENFR	ii
ASSIGN	=
INTLTR	1
SEMICN	;
WHILETK	while
LPARENT	(
IDENFR	get2
LBRACK	[
IDENFR	i
PLUS	+
IDENFR	ii
RBRACK	]
NEQ	!=
INTLTR	32
RPARENT	)
LBRACE	{
IDENFR	intadd
LPARENT	(
IDENFR	get2
LBRACK	[
IDENFR	i
PLUS	+
IDENFR	ii
RBRACK	]
MINU	-
INTLTR	48
RPARENT	)
SEMICN	;
IDENFR	ii
ASSIGN	=
IDENFR	ii
PLUS	+
INTLTR	1
SEMICN	;
RBRACE	}
IDENFR	i
ASSIGN	=
IDENFR	i
PLUS	+
IDENFR	ii
MINU	-
INTLTR	1
SEMICN	;
RBRACE	}
RBRACE	}
IDENFR	i
ASSIGN	=
IDENFR	i
PLUS	+
INTLTR	1
SEMICN	;
RBRACE	}
IDENFR	putint
LPARENT	(
IDENFR	ints
LBRACK	[
INTLTR	1
RBRACK	]
RPARENT	)
SEMICN	;
RETURNTK	return
INTLTR	0
SEMICN	;
RBRACE	}
